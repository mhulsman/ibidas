Dimension identity
------------------

if(dim.is_variable):
    id(id(parent_dim), dim)
else:
    id(dim)


Dimension matching
------------------
Fieldname: last dim of field (with identity of variable dims through dim
            branch)
Dim name:  if only one dim and is fixed: ok
           if multiple dims that are fixed: error
           if fixed and variable dim: error
           if variable dims: error
           if variable dim and unique path to fixed dim: ok
Dim tuple: last dim should be variable. If unique path to fixed dim: ok
index:     if only unique set of dims in active slices, apply index
None:      if unique set of dims in active slices, return last one / branch if
           is variable

Binary operation
----------------
Broadcasting/selection:
two slices, two set of dims are added, then:
match first two dimensions.
1) if match, continue with next two
2) no match, 
   a) if left or right dimension occurs later in right or left branch
       broadcast 
   b) otherwise, assume both dims should be equal
   continue with next two dims

Join operation
--------------
1) find unique dim(branch) for left and right. Right should be fixed, top
dimension. left can be variable, nested
2) if right has fixed dimension that occurs both on top, and as child:
   join that dimension too. 
3) Identification of right dim: see dim identification. If nothign supplied
however, first attempt to use condition to identify right dimension. 

Redim operation
---------------
Change dim from one to another
1) Shape may not be changed
2) source is identified using procedure top on source.
   target dim can also come from other representor. Allow user to add it as
   variable.
3) Delayed redim: source is not immediatly given, but added in next operation. 


Combine operation
-----------------

